// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreditTrasferClient is the client API for CreditTrasfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditTrasferClient interface {
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
}

type creditTrasferClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditTrasferClient(cc grpc.ClientConnInterface) CreditTrasferClient {
	return &creditTrasferClient{cc}
}

func (c *creditTrasferClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/CreditTrasfer/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditTrasferClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/CreditTrasfer/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditTrasferClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/CreditTrasfer/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditTrasferServer is the server API for CreditTrasfer service.
// All implementations must embed UnimplementedCreditTrasferServer
// for forward compatibility
type CreditTrasferServer interface {
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	mustEmbedUnimplementedCreditTrasferServer()
}

// UnimplementedCreditTrasferServer must be embedded to have forward compatible implementations.
type UnimplementedCreditTrasferServer struct {
}

func (UnimplementedCreditTrasferServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedCreditTrasferServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedCreditTrasferServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedCreditTrasferServer) mustEmbedUnimplementedCreditTrasferServer() {}

// UnsafeCreditTrasferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditTrasferServer will
// result in compilation errors.
type UnsafeCreditTrasferServer interface {
	mustEmbedUnimplementedCreditTrasferServer()
}

func RegisterCreditTrasferServer(s grpc.ServiceRegistrar, srv CreditTrasferServer) {
	s.RegisterService(&CreditTrasfer_ServiceDesc, srv)
}

func _CreditTrasfer_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrasferServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreditTrasfer/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrasferServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditTrasfer_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrasferServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreditTrasfer/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrasferServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditTrasfer_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrasferServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreditTrasfer/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrasferServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditTrasfer_ServiceDesc is the grpc.ServiceDesc for CreditTrasfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditTrasfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreditTrasfer",
	HandlerType: (*CreditTrasferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _CreditTrasfer_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _CreditTrasfer_Withdraw_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _CreditTrasfer_Balance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ct.proto",
}
